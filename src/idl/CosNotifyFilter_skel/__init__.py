""" Module: IDL:omg.org/CosNotifyFilter:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosNotifyFilter:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

class Filter_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyFilter/Filter:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/Filter:1.0"

    def _skel__get_constraint_grammar(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyFilter/Filter/constraint_grammar:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_string)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_constraint_grammar()

        # Create the reply.
        server_request.results(results)

        return

    def _skel_add_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/add_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintExpSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.add_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_modify_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/modify_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.modify_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/get_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_all_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/get_all_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_all_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_remove_all_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/remove_all_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.remove_all_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_destroy(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.destroy, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_match(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/match:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.match, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_match_structured(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/match_structured:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.match_structured, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_match_typed(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/match_typed:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/PropertySeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.match_typed, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_attach_callback(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/attach_callback:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.attach_callback, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_detach_callback(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/detach_callback:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.detach_callback, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_callbacks(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/get_callbacks:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_callbacks, arguments)

        # Create the reply.
        server_request.results(results)

        return

class MappingFilter_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyFilter/MappingFilter:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/MappingFilter:1.0"

    def _skel__get_constraint_grammar(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyFilter/MappingFilter/constraint_grammar:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_string)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_constraint_grammar()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_value_type(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyFilter/MappingFilter/value_type:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_TypeCode)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_value_type()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_default_value(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyFilter/MappingFilter/default_value:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_default_value()

        # Create the reply.
        server_request.results(results)

        return

    def _skel_add_mapping_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/add_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintPairSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidValue:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.add_mapping_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_modify_mapping_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/modify_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidValue:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.modify_mapping_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_mapping_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/get_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_mapping_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_all_mapping_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/get_all_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_all_mapping_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_remove_all_mapping_constraints(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/remove_all_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.remove_all_mapping_constraints, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_destroy(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.destroy, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_match(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/match:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.match, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_match_structured(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/match_structured:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.match_structured, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_match_typed(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/match_typed:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/PropertySeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.match_typed, arguments)

        # Create the reply.
        server_request.results(results)

        return

class FilterFactory_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyFilter/FilterFactory:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0"

    def _skel_create_filter(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterFactory/create_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_string)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.create_filter, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_create_mapping_filter(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterFactory/create_mapping_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_string)
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.create_mapping_filter, arguments)

        # Create the reply.
        server_request.results(results)

        return

class FilterAdmin_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"

    def _skel_add_filter(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/add_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.add_filter, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_remove_filter(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/remove_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.remove_filter, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_filter(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/get_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_filter, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_all_filters(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/get_all_filters:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_all_filters, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_remove_all_filters(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/remove_all_filters:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.remove_all_filters, arguments)

        # Create the reply.
        server_request.results(results)

        return

#############################################################################
