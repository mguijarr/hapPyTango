""" Module: IDL:omg.org/CosNotifyFilter:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosNotifyFilter:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

# Alias: IDL:omg.org/CosNotifyFilter/ConstraintID:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintID:1.0", "0000000000000003", None)

class ConstraintExp:
    """ Struct: IDL:omg.org/CosNotifyFilter/ConstraintExp:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/ConstraintExp:1.0"

    def __init__(self, _event_types, _constraint_expr):
        """ Constructor. """

        self.event_types = _event_types
        self.constraint_expr = _constraint_expr
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.event_types, self.constraint_expr)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintExponstraintExp)

# Alias: IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0", "000000000000001300000060000000000000001500000050000000000000002D49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F436F6E73747261696E7449443A312E30000000000000000D436F6E73747261696E744944000000000000000300000000", None)

# Alias: IDL:omg.org/CosNotifyFilter/ConstraintExpSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintExpSeq:1.0", "000000000000001300000170000000000000000F00000160000000000000002E49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F436F6E73747261696E744578703A312E300000000000000E436F6E73747261696E74457870000000000000020000000C6576656E745F74797065730000000015000000DC000000000000002D49444C3A6F6D672E6F72672F436F734E6F74696669636174696F6E2F4576656E74547970655365713A312E30000000000000000D4576656E7454797065536571000000000000001300000088000000000000000F00000078000000000000002A49444C3A6F6D672E6F72672F436F734E6F74696669636174696F6E2F4576656E74547970653A312E300000000000000A4576656E7454797065000000000000020000000C646F6D61696E5F6E616D650000000012000000000000000A747970655F6E616D6500000000000012000000000000000000000010636F6E73747261696E745F6578707200000000120000000000000000", None)

class ConstraintInfo:
    """ Struct: IDL:omg.org/CosNotifyFilter/ConstraintInfo:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/ConstraintInfo:1.0"

    def __init__(self, _constraint_expression, _constraint_id):
        """ Constructor. """

        self.constraint_expression = _constraint_expression
        self.constraint_id = _constraint_id
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.constraint_expression, self.constraint_id)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintInfoonstraintInfo)

# Alias: IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeqone)

class MappingConstraintPair:
    """ Struct: IDL:omg.org/CosNotifyFilter/MappingConstraintPair:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/MappingConstraintPair:1.0"

    def __init__(self, _constraint_expression, _result_to_set):
        """ Constructor. """

        self.constraint_expression = _constraint_expression
        self.result_to_set = _result_to_set
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.constraint_expression, self.result_to_set)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/MappingConstraintPairappingConstraintPair)

# Alias: IDL:omg.org/CosNotifyFilter/MappingConstraintPairSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/MappingConstraintPairSeqone)

class MappingConstraintInfo:
    """ Struct: IDL:omg.org/CosNotifyFilter/MappingConstraintInfo:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/MappingConstraintInfo:1.0"

    def __init__(self, _constraint_expression, _constraint_id, _value):
        """ Constructor. """

        self.constraint_expression = _constraint_expression
        self.constraint_id = _constraint_id
        self.value = _value
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.constraint_expression, self.constraint_id, self.value)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoappingConstraintInfo)

# Alias: IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeqone)

# Alias: IDL:omg.org/CosNotifyFilter/CallbackID:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/CallbackID:1.0", "0000000000000003", None)

# Alias: IDL:omg.org/CosNotifyFilter/CallbackIDSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/CallbackIDSeq:1.0", "000000000000001300000058000000000000001500000048000000000000002B49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F43616C6C6261636B49443A312E3000000000000B43616C6C6261636B494400000000000300000000", None)

class UnsupportedFilterableData(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0", "000000000000001600000068000000000000003A49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F556E737570706F7274656446696C74657261626C65446174613A312E300000000000001A556E737570706F7274656446696C74657261626C654461746100000000000000", UnsupportedFilterableData)

class InvalidGrammar(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0", "000000000000001600000050000000000000002F49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F496E76616C69644772616D6D61723A312E3000000000000F496E76616C69644772616D6D6172000000000000", InvalidGrammar)

class InvalidConstraint(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"

    def __init__(self, _constr):
        """ Constructor. """

        self.constr = _constr
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.constr,)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/InvalidConstraintnvalidConstraint)

class DuplicateConstraintID(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/DuplicateConstraintID:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/DuplicateConstraintID:1.0"

    def __init__(self, _id):
        """ Constructor. """

        self.id = _id
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.id,)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/DuplicateConstraintID:1.0", "0000000000000016000000C0000000000000003649444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F4475706C6963617465436F6E73747261696E7449443A312E30000000000000164475706C6963617465436F6E73747261696E7449440000000000000100000003696400000000001500000050000000000000002D49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F436F6E73747261696E7449443A312E30000000000000000D436F6E73747261696E7449440000000000000003", DuplicateConstraintID)

class ConstraintNotFound(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"

    def __init__(self, _id):
        """ Constructor. """

        self.id = _id
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.id,)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0", "0000000000000016000000B8000000000000003349444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F436F6E73747261696E744E6F74466F756E643A312E30000000000013436F6E73747261696E744E6F74466F756E6400000000000100000003696400000000001500000050000000000000002D49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F436F6E73747261696E7449443A312E30000000000000000D436F6E73747261696E7449440000000000000003", ConstraintNotFound)

class CallbackNotFound(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0", "000000000000001600000058000000000000003149444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F43616C6C6261636B4E6F74466F756E643A312E30000000000000001143616C6C6261636B4E6F74466F756E640000000000000000", CallbackNotFound)

class InvalidValue(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/InvalidValue:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/InvalidValue:1.0"

    def __init__(self, _constr, _value):
        """ Constructor. """

        self.constr = _constr
        self.value = _value
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.constr, self.value)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/InvalidValuenvalidValue)

class Filter(Fnorb.orb.CORBA.Object):
    """ Interface: IDL:omg.org/CosNotifyFilter/Filter:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/Filter:1.0"

    def _get_constraint_grammar(self):
        """ Attribute: IDL:omg.org/CosNotifyFilter/Filter/constraint_grammar:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_string)

        # Create a request object.
        request = self._create_request("_get_constraint_grammar", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def add_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/add_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintExpSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))

        # Create a request object.
        request = self._create_request("add_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def modify_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/modify_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Create a request object.
        request = self._create_request("modify_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/get_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_all_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/get_all_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_all_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def remove_all_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/remove_all_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("remove_all_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def destroy(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("destroy", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def match(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/match:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Create a request object.
        request = self._create_request("match", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def match_structured(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/match_structured:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Create a request object.
        request = self._create_request("match_structured", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def match_typed(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/match_typed:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/PropertySeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Create a request object.
        request = self._create_request("match_typed", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def attach_callback(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/attach_callback:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("attach_callback", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def detach_callback(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/detach_callback:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0"))

        # Create a request object.
        request = self._create_request("detach_callback", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_callbacks(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/Filter/get_callbacks:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/CallbackIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_callbacks", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/Filter:1.0", "000000000000000E0000003B000000000000002749444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F46696C7465723A312E3000000000000746696C74657200", Filter)

class MappingFilter(Fnorb.orb.CORBA.Object):
    """ Interface: IDL:omg.org/CosNotifyFilter/MappingFilter:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/MappingFilter:1.0"

    def _get_constraint_grammar(self):
        """ Attribute: IDL:omg.org/CosNotifyFilter/MappingFilter/constraint_grammar:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_string)

        # Create a request object.
        request = self._create_request("_get_constraint_grammar", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_value_type(self):
        """ Attribute: IDL:omg.org/CosNotifyFilter/MappingFilter/value_type:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_TypeCode)

        # Create a request object.
        request = self._create_request("_get_value_type", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_default_value(self):
        """ Attribute: IDL:omg.org/CosNotifyFilter/MappingFilter/default_value:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Create a request object.
        request = self._create_request("_get_default_value", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def add_mapping_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/add_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintPairSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidValue:1.0"))

        # Create a request object.
        request = self._create_request("add_mapping_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def modify_mapping_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/modify_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidValue:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Create a request object.
        request = self._create_request("modify_mapping_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_mapping_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/get_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintIDSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_mapping_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_all_mapping_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/get_all_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/MappingConstraintInfoSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_all_mapping_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def remove_all_mapping_constraints(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/remove_all_mapping_constraints:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("remove_all_mapping_constraints", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def destroy(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("destroy", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def match(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/match:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Create a request object.
        request = self._create_request("match", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def match_structured(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/match_structured:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Create a request object.
        request = self._create_request("match_structured", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def match_typed(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/MappingFilter/match_typed:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/PropertySeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0"))

        # Create a request object.
        request = self._create_request("match_typed", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/MappingFilter:1.0", "000000000000000E0000004A000000000000002E49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F4D617070696E6746696C7465723A312E300000000000000E4D617070696E6746696C74657200", MappingFilter)

class FilterFactory(Fnorb.orb.CORBA.Object):
    """ Interface: IDL:omg.org/CosNotifyFilter/FilterFactory:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0"

    def create_filter(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterFactory/create_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_string)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0"))

        # Create a request object.
        request = self._create_request("create_filter", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def create_mapping_filter(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterFactory/create_mapping_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_string)
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0"))

        # Create a request object.
        request = self._create_request("create_mapping_filter", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/FilterFactory:1.0", "000000000000000E0000004A000000000000002E49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F46696C746572466163746F72793A312E300000000000000E46696C746572466163746F727900", FilterFactory)

# Alias: IDL:omg.org/CosNotifyFilter/FilterID:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/FilterID:1.0", "0000000000000003", None)

# Alias: IDL:omg.org/CosNotifyFilter/FilterIDSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/FilterIDSeq:1.0", "000000000000001300000058000000000000001500000048000000000000002949444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F46696C74657249443A312E30000000000000000946696C7465724944000000000000000300000000", None)

class FilterNotFound(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0", "000000000000001600000050000000000000002F49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F46696C7465724E6F74466F756E643A312E3000000000000F46696C7465724E6F74466F756E64000000000000", FilterNotFound)

class FilterAdmin(Fnorb.orb.CORBA.Object):
    """ Interface: IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"

    def add_filter(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/add_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("add_filter", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def remove_filter(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/remove_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0"))

        # Create a request object.
        request = self._create_request("remove_filter", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_filter(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/get_filter:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_filter", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_all_filters(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/get_all_filters:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyFilter/FilterIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_all_filters", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def remove_all_filters(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyFilter/FilterAdmin/remove_all_filters:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("remove_all_filters", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0", "000000000000000E00000044000000000000002C49444C3A6F6D672E6F72672F436F734E6F7469667946696C7465722F46696C74657241646D696E3A312E30000000000C46696C74657241646D696E00", FilterAdmin)

#############################################################################
