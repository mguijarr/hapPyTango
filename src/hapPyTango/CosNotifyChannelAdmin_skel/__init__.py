""" Module: IDL:omg.org/CosNotifyChannelAdmin:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

# Import base interface packages.
import CosNotification_skel
import CosNotifyFilter_skel

class ProxyConsumer_skel(Fnorb.orb.CORBA.Object_skel, CosNotification_skel.QoSAdmin_skel, CosNotifyFilter_skel.FilterAdmin_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"

    def _skel__get_MyType(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/MyType:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyType()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_MyAdmin(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/MyAdmin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyAdmin()

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_subscription_types(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/obtain_subscription_types:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.obtain_subscription_types, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_validate_event_qos(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/validate_event_qos:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/QoSProperties:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/NamedPropertyRangeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedQoS:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.validate_event_qos, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotification_skel
import CosNotifyFilter_skel

class ProxySupplier_skel(Fnorb.orb.CORBA.Object_skel, CosNotification_skel.QoSAdmin_skel, CosNotifyFilter_skel.FilterAdmin_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"

    def _skel__get_MyType(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/MyType:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyType()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_MyAdmin(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/MyAdmin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyAdmin()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_priority_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/priority_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_priority_filter()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__set_priority_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/priority_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise(inputs, [], [])

        # Unmarshal the attribute value.
        value = server_request.arguments()[0]

        # Invoke the implementation.
        results = self._set_priority_filter(value)

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_lifetime_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_lifetime_filter()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__set_lifetime_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise(inputs, [], [])

        # Unmarshal the attribute value.
        value = server_request.arguments()[0]

        # Invoke the implementation.
        results = self._set_lifetime_filter(value)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_offered_types(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/obtain_offered_types:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.obtain_offered_types, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_validate_event_qos(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/validate_event_qos:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/QoSProperties:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/NamedPropertyRangeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedQoS:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.validate_event_qos, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class ProxyPushConsumer_skel(Fnorb.orb.CORBA.Object_skel, ProxyConsumer_skel, CosNotifyComm_skel.PushConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0"

    def _skel_connect_any_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer/connect_any_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_any_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class StructuredProxyPushConsumer_skel(Fnorb.orb.CORBA.Object_skel, ProxyConsumer_skel, CosNotifyComm_skel.StructuredPushConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0"

    def _skel_connect_structured_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer/connect_structured_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_structured_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class SequenceProxyPushConsumer_skel(Fnorb.orb.CORBA.Object_skel, ProxyConsumer_skel, CosNotifyComm_skel.SequencePushConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0"

    def _skel_connect_sequence_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer/connect_sequence_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_sequence_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class ProxyPullSupplier_skel(Fnorb.orb.CORBA.Object_skel, ProxySupplier_skel, CosNotifyComm_skel.PullSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0"

    def _skel_connect_any_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier/connect_any_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_any_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class StructuredProxyPullSupplier_skel(Fnorb.orb.CORBA.Object_skel, ProxySupplier_skel, CosNotifyComm_skel.StructuredPullSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0"

    def _skel_connect_structured_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier/connect_structured_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_structured_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class SequenceProxyPullSupplier_skel(Fnorb.orb.CORBA.Object_skel, ProxySupplier_skel, CosNotifyComm_skel.SequencePullSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0"

    def _skel_connect_sequence_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier/connect_sequence_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_sequence_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class ProxyPullConsumer_skel(Fnorb.orb.CORBA.Object_skel, ProxyConsumer_skel, CosNotifyComm_skel.PullConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0"

    def _skel_connect_any_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer/connect_any_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_any_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_suspend_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.suspend_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_resume_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.resume_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class StructuredProxyPullConsumer_skel(Fnorb.orb.CORBA.Object_skel, ProxyConsumer_skel, CosNotifyComm_skel.StructuredPullConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0"

    def _skel_connect_structured_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer/connect_structured_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_structured_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_suspend_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.suspend_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_resume_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.resume_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class SequenceProxyPullConsumer_skel(Fnorb.orb.CORBA.Object_skel, ProxyConsumer_skel, CosNotifyComm_skel.SequencePullConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0"

    def _skel_connect_sequence_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer/connect_sequence_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_sequence_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_suspend_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.suspend_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_resume_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.resume_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class ProxyPushSupplier_skel(Fnorb.orb.CORBA.Object_skel, ProxySupplier_skel, CosNotifyComm_skel.PushSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0"

    def _skel_connect_any_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier/connect_any_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_any_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_suspend_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.suspend_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_resume_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.resume_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class StructuredProxyPushSupplier_skel(Fnorb.orb.CORBA.Object_skel, ProxySupplier_skel, CosNotifyComm_skel.StructuredPushSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0"

    def _skel_connect_structured_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier/connect_structured_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_structured_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_suspend_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.suspend_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_resume_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.resume_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotifyComm_skel

class SequenceProxyPushSupplier_skel(Fnorb.orb.CORBA.Object_skel, ProxySupplier_skel, CosNotifyComm_skel.SequencePushSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0"

    def _skel_connect_sequence_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier/connect_sequence_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_sequence_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_suspend_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.suspend_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_resume_connection(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.resume_connection, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotification_skel
import CosNotifyComm_skel
import CosNotifyFilter_skel
import CosEventChannelAdmin_skel

class ConsumerAdmin_skel(Fnorb.orb.CORBA.Object_skel, CosNotification_skel.QoSAdmin_skel, CosNotifyComm_skel.NotifySubscribe_skel, CosNotifyFilter_skel.FilterAdmin_skel, CosEventChannelAdmin_skel.ConsumerAdmin_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"

    def _skel__get_MyID(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/MyID:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyID()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_MyChannel(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/MyChannel:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyChannel()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_MyOperator(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/MyOperator:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyOperator()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_priority_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/priority_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_priority_filter()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__set_priority_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/priority_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise(inputs, [], [])

        # Unmarshal the attribute value.
        value = server_request.arguments()[0]

        # Invoke the implementation.
        results = self._set_priority_filter(value)

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_lifetime_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_lifetime_filter()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__set_lifetime_filter(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise(inputs, [], [])

        # Unmarshal the attribute value.
        value = server_request.arguments()[0]

        # Invoke the implementation.
        results = self._set_lifetime_filter(value)

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_pull_suppliers(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/pull_suppliers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_pull_suppliers()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_push_suppliers(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/push_suppliers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_push_suppliers()

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_proxy_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/get_proxy_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_proxy_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_notification_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/obtain_notification_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.obtain_notification_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_notification_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/obtain_notification_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.obtain_notification_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_destroy(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.destroy, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotification_skel
import CosNotifyComm_skel
import CosNotifyFilter_skel
import CosEventChannelAdmin_skel

class SupplierAdmin_skel(Fnorb.orb.CORBA.Object_skel, CosNotification_skel.QoSAdmin_skel, CosNotifyComm_skel.NotifyPublish_skel, CosNotifyFilter_skel.FilterAdmin_skel, CosEventChannelAdmin_skel.SupplierAdmin_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"

    def _skel__get_MyID(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/MyID:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyID()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_MyChannel(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/MyChannel:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyChannel()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_MyOperator(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/MyOperator:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyOperator()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_pull_consumers(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/pull_consumers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_pull_consumers()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_push_consumers(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/push_consumers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_push_consumers()

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_proxy_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/get_proxy_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_proxy_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_notification_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/obtain_notification_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.obtain_notification_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_notification_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/obtain_notification_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.obtain_notification_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_destroy(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.destroy, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosNotification_skel
import CosNotification_skel
import CosEventChannelAdmin_skel

class EventChannel_skel(Fnorb.orb.CORBA.Object_skel, CosNotification_skel.QoSAdmin_skel, CosNotification_skel.AdminPropertiesAdmin_skel, CosEventChannelAdmin_skel.EventChannel_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0"

    def _skel__get_MyFactory(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/MyFactory:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_MyFactory()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_default_consumer_admin(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/default_consumer_admin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_default_consumer_admin()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_default_supplier_admin(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/default_supplier_admin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_default_supplier_admin()

        # Create the reply.
        server_request.results(results)

        return

    def _skel__get_default_filter_factory(self, server_request):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/default_filter_factory:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Initialise the server request object.
        server_request.initialise([], outputs, [])

        # Invoke the implementation.
        results = self._get_default_filter_factory()

        # Create the reply.
        server_request.results(results)

        return

    def _skel_new_for_consumers(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/new_for_consumers:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.new_for_consumers, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_new_for_suppliers(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/new_for_suppliers:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.new_for_suppliers, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_consumeradmin(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_consumeradmin:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_consumeradmin, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_supplieradmin(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_supplieradmin:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_supplieradmin, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_all_consumeradmins(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_all_consumeradmins:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_all_consumeradmins, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_all_supplieradmins(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_all_supplieradmins:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_all_supplieradmins, arguments)

        # Create the reply.
        server_request.results(results)

        return

class EventChannelFactory_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"

    def _skel_create_channel(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory/create_channel:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/QoSProperties:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/AdminProperties:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedQoS:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedAdmin:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.create_channel, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_all_channels(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory/get_all_channels:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.get_all_channels, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_get_event_channel(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory/get_event_channel:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.get_event_channel, arguments)

        # Create the reply.
        server_request.results(results)

        return

#############################################################################
