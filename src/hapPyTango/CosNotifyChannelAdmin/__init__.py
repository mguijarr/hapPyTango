""" Module: IDL:omg.org/CosNotifyChannelAdmin:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

class ConnectionAlreadyActive(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0", "000000000000001600000068000000000000003E49444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F436F6E6E656374696F6E416C72656164794163746976653A312E3000000000000018436F6E6E656374696F6E416C72656164794163746976650000000000", ConnectionAlreadyActive)

class ConnectionAlreadyInactive(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0", "00000000000000160000006C000000000000004049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F436F6E6E656374696F6E416C7265616479496E6163746976653A312E30000000001A436F6E6E656374696F6E416C7265616479496E61637469766500000000000000", ConnectionAlreadyInactive)

class NotConnected(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0", "000000000000001600000054000000000000003349444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F4E6F74436F6E6E65637465643A312E3000000000000D4E6F74436F6E6E65637465640000000000000000", NotConnected)

# Enum: IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0
PUSH_ANY = Fnorb.orb.Util.EnumMember("PUSH_ANY", 0)
PULL_ANY = Fnorb.orb.Util.EnumMember("PULL_ANY", 1)
PUSH_STRUCTURED = Fnorb.orb.Util.EnumMember("PUSH_STRUCTURED", 2)
PULL_STRUCTURED = Fnorb.orb.Util.EnumMember("PULL_STRUCTURED", 3)
PUSH_SEQUENCE = Fnorb.orb.Util.EnumMember("PUSH_SEQUENCE", 4)
PULL_SEQUENCE = Fnorb.orb.Util.EnumMember("PULL_SEQUENCE", 5)
PUSH_TYPED = Fnorb.orb.Util.EnumMember("PUSH_TYPED", 6)
PULL_TYPED = Fnorb.orb.Util.EnumMember("PULL_TYPED", 7)
ProxyType = Fnorb.orb.Util.Enum("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0", [PUSH_ANY, PULL_ANY, PUSH_STRUCTURED, PULL_STRUCTURED, PUSH_SEQUENCE, PULL_SEQUENCE, PUSH_TYPED, PULL_TYPED])

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0", "0000000000000011000000DB000000000000003049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F7879547970653A312E30000000000A50726F7879547970650000000000000800000009505553485F414E59000000000000000950554C4C5F414E590000000000000010505553485F53545255435455524544000000001050554C4C5F53545255435455524544000000000E505553485F53455155454E43450000000000000E50554C4C5F53455155454E43450000000000000B505553485F545950454400000000000B50554C4C5F545950454400", ProxyType)

# Enum: IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0
ALL_NOW_UPDATES_OFF = Fnorb.orb.Util.EnumMember("ALL_NOW_UPDATES_OFF", 0)
ALL_NOW_UPDATES_ON = Fnorb.orb.Util.EnumMember("ALL_NOW_UPDATES_ON", 1)
NONE_NOW_UPDATES_OFF = Fnorb.orb.Util.EnumMember("NONE_NOW_UPDATES_OFF", 2)
NONE_NOW_UPDATES_ON = Fnorb.orb.Util.EnumMember("NONE_NOW_UPDATES_ON", 3)
ObtainInfoMode = Fnorb.orb.Util.Enum("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0", [ALL_NOW_UPDATES_OFF, ALL_NOW_UPDATES_ON, NONE_NOW_UPDATES_OFF, NONE_NOW_UPDATES_ON])

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0", "0000000000000011000000BC000000000000003549444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F4F627461696E496E666F4D6F64653A312E30000000000000000F4F627461696E496E666F4D6F646500000000000400000014414C4C5F4E4F575F555044415445535F4F46460000000013414C4C5F4E4F575F555044415445535F4F4E0000000000154E4F4E455F4E4F575F555044415445535F4F464600000000000000144E4F4E455F4E4F575F555044415445535F4F4E00", ObtainInfoMode)

# Import base interface packages.
import CosNotification
import CosNotifyFilter

class ProxyConsumer(Fnorb.orb.CORBA.Object, CosNotification.QoSAdmin, CosNotifyFilter.FilterAdmin):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"

    def _get_MyType(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/MyType:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0"))

        # Create a request object.
        request = self._create_request("_get_MyType", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_MyAdmin(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/MyAdmin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_MyAdmin", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def obtain_subscription_types(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/obtain_subscription_types:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("obtain_subscription_types", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def validate_event_qos(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer/validate_event_qos:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/QoSProperties:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/NamedPropertyRangeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedQoS:1.0"))

        # Create a request object.
        request = self._create_request("validate_event_qos", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0", "000000000000000E0000004E000000000000003449444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F7879436F6E73756D65723A312E30000000000E50726F7879436F6E73756D657200", ProxyConsumer)

# Import base interface packages.
import CosNotification
import CosNotifyFilter

class ProxySupplier(Fnorb.orb.CORBA.Object, CosNotification.QoSAdmin, CosNotifyFilter.FilterAdmin):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"

    def _get_MyType(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/MyType:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0"))

        # Create a request object.
        request = self._create_request("_get_MyType", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_MyAdmin(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/MyAdmin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_MyAdmin", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_priority_filter(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/priority_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_priority_filter", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _set_priority_filter(self, _value):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/priority_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_set_priority_filter", inputs, [], [])

        # Make the request!
        request.invoke(_value)

        return

    def _get_lifetime_filter(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_lifetime_filter", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _set_lifetime_filter(self, _value):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_set_lifetime_filter", inputs, [], [])

        # Make the request!
        request.invoke(_value)

        return

    def obtain_offered_types(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/obtain_offered_types:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("obtain_offered_types", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def validate_event_qos(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier/validate_event_qos:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/QoSProperties:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/NamedPropertyRangeSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedQoS:1.0"))

        # Create a request object.
        request = self._create_request("validate_event_qos", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0", "000000000000000E0000004E000000000000003449444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F7879537570706C6965723A312E30000000000E50726F7879537570706C69657200", ProxySupplier)

# Import base interface packages.
import CosNotifyComm

class ProxyPushConsumer(Fnorb.orb.CORBA.Object, ProxyConsumer, CosNotifyComm.PushConsumer):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0"

    def connect_any_push_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer/connect_any_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Create a request object.
        request = self._create_request("connect_any_push_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0", "000000000000000E00000056000000000000003849444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F787950757368436F6E73756D65723A312E30000000001250726F787950757368436F6E73756D657200", ProxyPushConsumer)

# Import base interface packages.
import CosNotifyComm

class StructuredProxyPushConsumer(Fnorb.orb.CORBA.Object, ProxyConsumer, CosNotifyComm.StructuredPushConsumer):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0"

    def connect_structured_push_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer/connect_structured_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Create a request object.
        request = self._create_request("connect_structured_push_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0", "000000000000000E0000006C000000000000004249444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F5374727563747572656450726F787950757368436F6E73756D65723A312E300000000000001C5374727563747572656450726F787950757368436F6E73756D657200", StructuredProxyPushConsumer)

# Import base interface packages.
import CosNotifyComm

class SequenceProxyPushConsumer(Fnorb.orb.CORBA.Object, ProxyConsumer, CosNotifyComm.SequencePushConsumer):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0"

    def connect_sequence_push_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer/connect_sequence_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Create a request object.
        request = self._create_request("connect_sequence_push_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0", "000000000000000E00000066000000000000004049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F53657175656E636550726F787950757368436F6E73756D65723A312E30000000001A53657175656E636550726F787950757368436F6E73756D657200", SequenceProxyPushConsumer)

# Import base interface packages.
import CosNotifyComm

class ProxyPullSupplier(Fnorb.orb.CORBA.Object, ProxySupplier, CosNotifyComm.PullSupplier):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0"

    def connect_any_pull_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier/connect_any_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Create a request object.
        request = self._create_request("connect_any_pull_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0", "000000000000000E00000056000000000000003849444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F787950756C6C537570706C6965723A312E30000000001250726F787950756C6C537570706C69657200", ProxyPullSupplier)

# Import base interface packages.
import CosNotifyComm

class StructuredProxyPullSupplier(Fnorb.orb.CORBA.Object, ProxySupplier, CosNotifyComm.StructuredPullSupplier):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0"

    def connect_structured_pull_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier/connect_structured_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Create a request object.
        request = self._create_request("connect_structured_pull_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0", "000000000000000E0000006C000000000000004249444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F5374727563747572656450726F787950756C6C537570706C6965723A312E300000000000001C5374727563747572656450726F787950756C6C537570706C69657200", StructuredProxyPullSupplier)

# Import base interface packages.
import CosNotifyComm

class SequenceProxyPullSupplier(Fnorb.orb.CORBA.Object, ProxySupplier, CosNotifyComm.SequencePullSupplier):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0"

    def connect_sequence_pull_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier/connect_sequence_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Create a request object.
        request = self._create_request("connect_sequence_pull_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0", "000000000000000E00000066000000000000004049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F53657175656E636550726F787950756C6C537570706C6965723A312E30000000001A53657175656E636550726F787950756C6C537570706C69657200", SequenceProxyPullSupplier)

# Import base interface packages.
import CosNotifyComm

class ProxyPullConsumer(Fnorb.orb.CORBA.Object, ProxyConsumer, CosNotifyComm.PullConsumer):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0"

    def connect_any_pull_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer/connect_any_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Create a request object.
        request = self._create_request("connect_any_pull_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def suspend_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("suspend_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def resume_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("resume_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0", "000000000000000E00000056000000000000003849444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F787950756C6C436F6E73756D65723A312E30000000001250726F787950756C6C436F6E73756D657200", ProxyPullConsumer)

# Import base interface packages.
import CosNotifyComm

class StructuredProxyPullConsumer(Fnorb.orb.CORBA.Object, ProxyConsumer, CosNotifyComm.StructuredPullConsumer):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0"

    def connect_structured_pull_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer/connect_structured_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Create a request object.
        request = self._create_request("connect_structured_pull_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def suspend_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("suspend_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def resume_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("resume_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0", "000000000000000E0000006C000000000000004249444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F5374727563747572656450726F787950756C6C436F6E73756D65723A312E300000000000001C5374727563747572656450726F787950756C6C436F6E73756D657200", StructuredProxyPullConsumer)

# Import base interface packages.
import CosNotifyComm

class SequenceProxyPullConsumer(Fnorb.orb.CORBA.Object, ProxyConsumer, CosNotifyComm.SequencePullConsumer):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0"

    def connect_sequence_pull_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer/connect_sequence_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Create a request object.
        request = self._create_request("connect_sequence_pull_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def suspend_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("suspend_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def resume_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("resume_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0", "000000000000000E00000066000000000000004049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F53657175656E636550726F787950756C6C436F6E73756D65723A312E30000000001A53657175656E636550726F787950756C6C436F6E73756D657200", SequenceProxyPullConsumer)

# Import base interface packages.
import CosNotifyComm

class ProxyPushSupplier(Fnorb.orb.CORBA.Object, ProxySupplier, CosNotifyComm.PushSupplier):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0"

    def connect_any_push_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier/connect_any_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Create a request object.
        request = self._create_request("connect_any_push_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def suspend_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("suspend_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def resume_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("resume_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0", "000000000000000E00000056000000000000003849444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F787950757368537570706C6965723A312E30000000001250726F787950757368537570706C69657200", ProxyPushSupplier)

# Import base interface packages.
import CosNotifyComm

class StructuredProxyPushSupplier(Fnorb.orb.CORBA.Object, ProxySupplier, CosNotifyComm.StructuredPushSupplier):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0"

    def connect_structured_push_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier/connect_structured_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Create a request object.
        request = self._create_request("connect_structured_push_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def suspend_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("suspend_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def resume_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("resume_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0", "000000000000000E0000006C000000000000004249444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F5374727563747572656450726F787950757368537570706C6965723A312E300000000000001C5374727563747572656450726F787950757368537570706C69657200", StructuredProxyPushSupplier)

# Import base interface packages.
import CosNotifyComm

class SequenceProxyPushSupplier(Fnorb.orb.CORBA.Object, ProxySupplier, CosNotifyComm.SequencePushSupplier):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0"

    def connect_sequence_push_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier/connect_sequence_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Create a request object.
        request = self._create_request("connect_sequence_push_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def suspend_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier/suspend_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("suspend_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def resume_connection(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier/resume_connection:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0"))

        # Create a request object.
        request = self._create_request("resume_connection", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0", "000000000000000E00000066000000000000004049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F53657175656E636550726F787950757368537570706C6965723A312E30000000001A53657175656E636550726F787950757368537570706C69657200", SequenceProxyPushSupplier)

# Alias: IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0", "0000000000000003", None)

# Alias: IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0", "000000000000001300000058000000000000001500000048000000000000002E49444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F787949443A312E300000000000000850726F78794944000000000300000000", None)

# Enum: IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0
ANY_EVENT = Fnorb.orb.Util.EnumMember("ANY_EVENT", 0)
STRUCTURED_EVENT = Fnorb.orb.Util.EnumMember("STRUCTURED_EVENT", 1)
SEQUENCE_EVENT = Fnorb.orb.Util.EnumMember("SEQUENCE_EVENT", 2)
ClientType = Fnorb.orb.Util.Enum("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0", [ANY_EVENT, STRUCTURED_EVENT, SEQUENCE_EVENT])

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0", "00000000000000110000008B000000000000003149444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F436C69656E74547970653A312E30000000000000000B436C69656E74547970650000000000030000000A414E595F4556454E5400000000000011535452554354555245445F4556454E54000000000000000F53455155454E43455F4556454E5400", ClientType)

# Enum: IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0
AND_OP = Fnorb.orb.Util.EnumMember("AND_OP", 0)
OR_OP = Fnorb.orb.Util.EnumMember("OR_OP", 1)
InterFilterGroupOperator = Fnorb.orb.Util.Enum("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0", [AND_OP, OR_OP])

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0", "000000000000001100000082000000000000003F49444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F496E74657246696C74657247726F75704F70657261746F723A312E30000000000019496E74657246696C74657247726F75704F70657261746F72000000000000000200000007414E445F4F500000000000064F525F4F5000", InterFilterGroupOperator)

# Alias: IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0", "0000000000000003", None)

# Alias: IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0", "000000000000001300000058000000000000001500000048000000000000002E49444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F41646D696E49443A312E300000000000000841646D696E4944000000000300000000", None)

class AdminNotFound(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0", "000000000000001600000054000000000000003449444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F41646D696E4E6F74466F756E643A312E30000000000E41646D696E4E6F74466F756E6400000000000000", AdminNotFound)

class ProxyNotFound(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0", "000000000000001600000054000000000000003449444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F50726F78794E6F74466F756E643A312E30000000000E50726F78794E6F74466F756E6400000000000000", ProxyNotFound)

class AdminLimit:
    """ Struct: IDL:omg.org/CosNotifyChannelAdmin/AdminLimit:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/AdminLimit:1.0"

    def __init__(self, _name, _value):
        """ Constructor. """

        self.name = _name
        self.value = _value
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.name, self.value)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitdminLimit)

class AdminLimitExceeded(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"

    def __init__(self, _admin_property_err):
        """ Constructor. """

        self.admin_property_err = _admin_property_err
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.admin_property_err,)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceededdminLimitExceeded)

# Import base interface packages.
import CosNotification
import CosNotifyComm
import CosNotifyFilter
import CosEventChannelAdmin

class ConsumerAdmin(Fnorb.orb.CORBA.Object, CosNotification.QoSAdmin, CosNotifyComm.NotifySubscribe, CosNotifyFilter.FilterAdmin, CosEventChannelAdmin.ConsumerAdmin):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"

    def _get_MyID(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/MyID:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Create a request object.
        request = self._create_request("_get_MyID", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_MyChannel(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/MyChannel:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_MyChannel", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_MyOperator(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/MyOperator:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Create a request object.
        request = self._create_request("_get_MyOperator", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_priority_filter(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/priority_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_priority_filter", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _set_priority_filter(self, _value):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/priority_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_set_priority_filter", inputs, [], [])

        # Make the request!
        request.invoke(_value)

        return

    def _get_lifetime_filter(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_lifetime_filter", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _set_lifetime_filter(self, _value):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/lifetime_filter:1.0 """

        # Typecode for the attribute value.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_set_lifetime_filter", inputs, [], [])

        # Make the request!
        request.invoke(_value)

        return

    def _get_pull_suppliers(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/pull_suppliers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Create a request object.
        request = self._create_request("_get_pull_suppliers", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_push_suppliers(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/push_suppliers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Create a request object.
        request = self._create_request("_get_push_suppliers", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def get_proxy_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/get_proxy_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_proxy_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def obtain_notification_pull_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/obtain_notification_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Create a request object.
        request = self._create_request("obtain_notification_pull_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def obtain_notification_push_supplier(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/obtain_notification_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Create a request object.
        request = self._create_request("obtain_notification_push_supplier", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def destroy(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("destroy", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0", "000000000000000E0000004E000000000000003449444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F436F6E73756D657241646D696E3A312E30000000000E436F6E73756D657241646D696E00", ConsumerAdmin)

# Import base interface packages.
import CosNotification
import CosNotifyComm
import CosNotifyFilter
import CosEventChannelAdmin

class SupplierAdmin(Fnorb.orb.CORBA.Object, CosNotification.QoSAdmin, CosNotifyComm.NotifyPublish, CosNotifyFilter.FilterAdmin, CosEventChannelAdmin.SupplierAdmin):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"

    def _get_MyID(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/MyID:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Create a request object.
        request = self._create_request("_get_MyID", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_MyChannel(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/MyChannel:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_MyChannel", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_MyOperator(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/MyOperator:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Create a request object.
        request = self._create_request("_get_MyOperator", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_pull_consumers(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/pull_consumers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Create a request object.
        request = self._create_request("_get_pull_consumers", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_push_consumers(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/push_consumers:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0"))

        # Create a request object.
        request = self._create_request("_get_push_consumers", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def get_proxy_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/get_proxy_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_proxy_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def obtain_notification_pull_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/obtain_notification_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Create a request object.
        request = self._create_request("obtain_notification_pull_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def obtain_notification_push_consumer(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/obtain_notification_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0"))

        # Create a request object.
        request = self._create_request("obtain_notification_push_consumer", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def destroy(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("destroy", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0", "000000000000000E0000004E000000000000003449444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F537570706C69657241646D696E3A312E30000000000E537570706C69657241646D696E00", SupplierAdmin)

# Import base interface packages.
import CosNotification
import CosNotification
import CosEventChannelAdmin

class EventChannel(Fnorb.orb.CORBA.Object, CosNotification.QoSAdmin, CosNotification.AdminPropertiesAdmin, CosEventChannelAdmin.EventChannel):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0"

    def _get_MyFactory(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/MyFactory:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_MyFactory", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_default_consumer_admin(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/default_consumer_admin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_default_consumer_admin", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_default_supplier_admin(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/default_supplier_admin:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_default_supplier_admin", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def _get_default_filter_factory(self):
        """ Attribute: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/default_filter_factory:1.0 """

        # Typecode for the attribute value.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Create a request object.
        request = self._create_request("_get_default_filter_factory", [], outputs, [])

        # Make the request!
        request.invoke()

        # Return the attribute value.
        return request.results()

    def new_for_consumers(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/new_for_consumers:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("new_for_consumers", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def new_for_suppliers(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/new_for_suppliers:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("new_for_suppliers", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_consumeradmin(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_consumeradmin:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_consumeradmin", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_supplieradmin(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_supplieradmin:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_supplieradmin", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_all_consumeradmins(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_all_consumeradmins:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_all_consumeradmins", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_all_supplieradmins(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannel/get_all_supplieradmins:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_all_supplieradmins", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0", "000000000000000E0000004D000000000000003349444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F4576656E744368616E6E656C3A312E3000000000000D4576656E744368616E6E656C00", EventChannel)

# Alias: IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0", "0000000000000003", None)

# Alias: IDL:omg.org/CosNotifyChannelAdmin/ChannelIDSeq:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ChannelIDSeq:1.0", "00000000000000130000005C00000000000000150000004C000000000000003049444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F4368616E6E656C49443A312E30000000000A4368616E6E656C49440000000000000300000000", None)

class ChannelNotFound(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0"

    def __init__(self):
        """ Constructor. """

        return

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0", "000000000000001600000058000000000000003649444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F4368616E6E656C4E6F74466F756E643A312E30000000000000104368616E6E656C4E6F74466F756E640000000000", ChannelNotFound)

class EventChannelFactory(Fnorb.orb.CORBA.Object):
    """ Interface: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"

    def create_channel(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory/create_channel:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/QoSProperties:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/AdminProperties:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedQoS:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/UnsupportedAdmin:1.0"))

        # Create a request object.
        request = self._create_request("create_channel", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_all_channels(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory/get_all_channels:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelIDSeq:1.0"))

        # Typecodes for user exceptions.
        exceptions = []

        # Create a request object.
        request = self._create_request("get_all_channels", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def get_event_channel(self, *args, **kw):
        """ Operation: IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory/get_event_channel:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0"))

        # Create a request object.
        request = self._create_request("get_event_channel", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0", "000000000000000E0000005C000000000000003A49444C3A6F6D672E6F72672F436F734E6F746966794368616E6E656C41646D696E2F4576656E744368616E6E656C466163746F72793A312E30000000000000144576656E744368616E6E656C466163746F727900", EventChannelFactory)

#############################################################################
