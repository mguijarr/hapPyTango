""" Module: IDL:omg.org/CosEventChannelAdmin:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosEventChannelAdmin:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

# Import base interface packages.
import CosEventComm_skel

class ProxyPushConsumer_skel(Fnorb.orb.CORBA.Object_skel, CosEventComm_skel.PushConsumer_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0"

    def _skel_connect_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer/connect_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosEventComm_skel

class ProxyPullSupplier_skel(Fnorb.orb.CORBA.Object_skel, CosEventComm_skel.PullSupplier_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0"

    def _skel_connect_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier/connect_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosEventComm_skel

class ProxyPullConsumer_skel(Fnorb.orb.CORBA.Object_skel, CosEventComm_skel.PullConsumer_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0"

    def _skel_connect_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer/connect_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosEventComm_skel

class ProxyPushSupplier_skel(Fnorb.orb.CORBA.Object_skel, CosEventComm_skel.PushSupplier_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0"

    def _skel_connect_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier/connect_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0"))
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventChannelAdmin/TypeError:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.connect_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class ConsumerAdmin_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"

    def _skel_obtain_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin/obtain_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.obtain_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin/obtain_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.obtain_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

class SupplierAdmin_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"

    def _skel_obtain_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/SupplierAdmin/obtain_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.obtain_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_obtain_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/SupplierAdmin/obtain_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.obtain_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class EventChannel_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"

    def _skel_for_consumers(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/EventChannel/for_consumers:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.for_consumers, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_for_suppliers(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/EventChannel/for_suppliers:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_Object)

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.for_suppliers, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_destroy(self, server_request):
        """ Operation: IDL:omg.org/CosEventChannelAdmin/EventChannel/destroy:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.destroy, arguments)

        # Create the reply.
        server_request.results(results)

        return

#############################################################################
