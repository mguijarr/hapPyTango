""" Module: IDL:omg.org/CosNotifyComm:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosNotifyComm:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

class NotifyPublish_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/NotifyPublish:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"

    def _skel_offer_change(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/NotifyPublish/offer_change:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyComm/InvalidEventType:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.offer_change, arguments)

        # Create the reply.
        server_request.results(results)

        return

class NotifySubscribe_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"

    def _skel_subscription_change(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/NotifySubscribe/subscription_change:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventTypeSeq:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotifyComm/InvalidEventType:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.subscription_change, arguments)

        # Create the reply.
        server_request.results(results)

        return

# Import base interface packages.
import CosEventComm_skel

class PushConsumer_skel(Fnorb.orb.CORBA.Object_skel, NotifyPublish_skel, CosEventComm_skel.PushConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/PushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/PushConsumer:1.0"

    pass

# Import base interface packages.
import CosEventComm_skel

class PullConsumer_skel(Fnorb.orb.CORBA.Object_skel, NotifyPublish_skel, CosEventComm_skel.PullConsumer_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/PullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/PullConsumer:1.0"

    pass

# Import base interface packages.
import CosEventComm_skel

class PullSupplier_skel(Fnorb.orb.CORBA.Object_skel, NotifySubscribe_skel, CosEventComm_skel.PullSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/PullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/PullSupplier:1.0"

    pass

# Import base interface packages.
import CosEventComm_skel

class PushSupplier_skel(Fnorb.orb.CORBA.Object_skel, NotifySubscribe_skel, CosEventComm_skel.PushSupplier_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/PushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/PushSupplier:1.0"

    pass

class StructuredPushConsumer_skel(Fnorb.orb.CORBA.Object_skel, NotifyPublish_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0"

    def _skel_push_structured_event(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPushConsumer/push_structured_event:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.push_structured_event, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_disconnect_structured_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPushConsumer/disconnect_structured_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_structured_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class StructuredPullConsumer_skel(Fnorb.orb.CORBA.Object_skel, NotifyPublish_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/StructuredPullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/StructuredPullConsumer:1.0"

    def _skel_disconnect_structured_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPullConsumer/disconnect_structured_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_structured_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class StructuredPullSupplier_skel(Fnorb.orb.CORBA.Object_skel, NotifySubscribe_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/StructuredPullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/StructuredPullSupplier:1.0"

    def _skel_pull_structured_event(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPullSupplier/pull_structured_event:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.pull_structured_event, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_try_pull_structured_event(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPullSupplier/try_pull_structured_event:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/StructuredEvent:1.0"))
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.try_pull_structured_event, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_disconnect_structured_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPullSupplier/disconnect_structured_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_structured_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

class StructuredPushSupplier_skel(Fnorb.orb.CORBA.Object_skel, NotifySubscribe_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0"

    def _skel_disconnect_structured_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/StructuredPushSupplier/disconnect_structured_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_structured_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

class SequencePushConsumer_skel(Fnorb.orb.CORBA.Object_skel, NotifyPublish_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0"

    def _skel_push_structured_events(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePushConsumer/push_structured_events:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventBatch:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.push_structured_events, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_disconnect_sequence_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePushConsumer/disconnect_sequence_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_sequence_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class SequencePullConsumer_skel(Fnorb.orb.CORBA.Object_skel, NotifyPublish_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/SequencePullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/SequencePullConsumer:1.0"

    def _skel_disconnect_sequence_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePullConsumer/disconnect_sequence_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_sequence_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class SequencePullSupplier_skel(Fnorb.orb.CORBA.Object_skel, NotifySubscribe_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/SequencePullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/SequencePullSupplier:1.0"

    def _skel_pull_structured_events(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePullSupplier/pull_structured_events:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_long)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventBatch:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.pull_structured_events, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_try_pull_structured_events(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePullSupplier/try_pull_structured_events:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_long)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosNotification/EventBatch:1.0"))
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.try_pull_structured_events, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_disconnect_sequence_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePullSupplier/disconnect_sequence_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_sequence_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

class SequencePushSupplier_skel(Fnorb.orb.CORBA.Object_skel, NotifySubscribe_skel):
    """ Interface: IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0"

    def _skel_disconnect_sequence_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosNotifyComm/SequencePushSupplier/disconnect_sequence_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_sequence_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

#############################################################################
