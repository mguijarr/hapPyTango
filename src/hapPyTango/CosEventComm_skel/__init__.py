""" Module: IDL:omg.org/CosEventComm:1.0

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = "IDL:omg.org/CosEventComm:1.0"

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

class PushConsumer_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventComm/PushConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventComm/PushConsumer:1.0"

    def _skel_push(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PushConsumer/push:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # Unmarshal the arguments to the request.
        arguments = server_request.arguments()

        # Invoke the implementation.
        results = apply(self.push, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_disconnect_push_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PushConsumer/disconnect_push_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_push_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

class PushSupplier_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventComm/PushSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventComm/PushSupplier:1.0"

    def _skel_disconnect_push_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PushSupplier/disconnect_push_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_push_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

class PullSupplier_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventComm/PullSupplier:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventComm/PullSupplier:1.0"

    def _skel_pull(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PullSupplier/pull:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_any)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.pull, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_try_pull(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PullSupplier/try_pull:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_any)
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:omg.org/CosEventComm/Disconnected:1.0"))

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.try_pull, arguments)

        # Create the reply.
        server_request.results(results)

        return

    def _skel_disconnect_pull_supplier(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PullSupplier/disconnect_pull_supplier:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_pull_supplier, arguments)

        # Create the reply.
        server_request.results(results)

        return

class PullConsumer_skel(Fnorb.orb.CORBA.Object_skel):
    """ Interface: IDL:omg.org/CosEventComm/PullConsumer:1.0 """

    _FNORB_ID = "IDL:omg.org/CosEventComm/PullConsumer:1.0"

    def _skel_disconnect_pull_consumer(self, server_request):
        """ Operation: IDL:omg.org/CosEventComm/PullConsumer/disconnect_pull_consumer:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []

        # Typecodes for user exceptions.
        exceptions = []

        # Initialise the server request object.
        server_request.initialise(inputs, outputs, exceptions)

        # This operation has no arguments.
        arguments = ()

        # Invoke the implementation.
        results = apply(self.disconnect_pull_consumer, arguments)

        # Create the reply.
        server_request.results(results)

        return

#############################################################################
